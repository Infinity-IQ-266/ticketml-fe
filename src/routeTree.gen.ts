/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ResourcesIndexRouteImport } from './routes/resources/index'
import { Route as PaymentResultIndexRouteImport } from './routes/payment-result/index'
import { Route as MyWalletIndexRouteImport } from './routes/my-wallet/index'
import { Route as Oauth2RedirectIndexRouteImport } from './routes/oauth2/redirect/index'
import { Route as EventEventIdIndexRouteImport } from './routes/event/$eventId/index'
import { Route as EventEventIdPaymentIndexRouteImport } from './routes/event/$eventId/payment/index'
import { Route as EventEventIdPaymentConfirmIndexRouteImport } from './routes/event/$eventId/payment/confirm/index'

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ResourcesIndexRoute = ResourcesIndexRouteImport.update({
  id: '/resources/',
  path: '/resources/',
  getParentRoute: () => rootRouteImport,
} as any)
const PaymentResultIndexRoute = PaymentResultIndexRouteImport.update({
  id: '/payment-result/',
  path: '/payment-result/',
  getParentRoute: () => rootRouteImport,
} as any)
const MyWalletIndexRoute = MyWalletIndexRouteImport.update({
  id: '/my-wallet/',
  path: '/my-wallet/',
  getParentRoute: () => rootRouteImport,
} as any)
const Oauth2RedirectIndexRoute = Oauth2RedirectIndexRouteImport.update({
  id: '/oauth2/redirect/',
  path: '/oauth2/redirect/',
  getParentRoute: () => rootRouteImport,
} as any)
const EventEventIdIndexRoute = EventEventIdIndexRouteImport.update({
  id: '/event/$eventId/',
  path: '/event/$eventId/',
  getParentRoute: () => rootRouteImport,
} as any)
const EventEventIdPaymentIndexRoute =
  EventEventIdPaymentIndexRouteImport.update({
    id: '/event/$eventId/payment/',
    path: '/event/$eventId/payment/',
    getParentRoute: () => rootRouteImport,
  } as any)
const EventEventIdPaymentConfirmIndexRoute =
  EventEventIdPaymentConfirmIndexRouteImport.update({
    id: '/event/$eventId/payment/confirm/',
    path: '/event/$eventId/payment/confirm/',
    getParentRoute: () => rootRouteImport,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/my-wallet': typeof MyWalletIndexRoute
  '/payment-result': typeof PaymentResultIndexRoute
  '/resources': typeof ResourcesIndexRoute
  '/event/$eventId': typeof EventEventIdIndexRoute
  '/oauth2/redirect': typeof Oauth2RedirectIndexRoute
  '/event/$eventId/payment': typeof EventEventIdPaymentIndexRoute
  '/event/$eventId/payment/confirm': typeof EventEventIdPaymentConfirmIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/my-wallet': typeof MyWalletIndexRoute
  '/payment-result': typeof PaymentResultIndexRoute
  '/resources': typeof ResourcesIndexRoute
  '/event/$eventId': typeof EventEventIdIndexRoute
  '/oauth2/redirect': typeof Oauth2RedirectIndexRoute
  '/event/$eventId/payment': typeof EventEventIdPaymentIndexRoute
  '/event/$eventId/payment/confirm': typeof EventEventIdPaymentConfirmIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/my-wallet/': typeof MyWalletIndexRoute
  '/payment-result/': typeof PaymentResultIndexRoute
  '/resources/': typeof ResourcesIndexRoute
  '/event/$eventId/': typeof EventEventIdIndexRoute
  '/oauth2/redirect/': typeof Oauth2RedirectIndexRoute
  '/event/$eventId/payment/': typeof EventEventIdPaymentIndexRoute
  '/event/$eventId/payment/confirm/': typeof EventEventIdPaymentConfirmIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/my-wallet'
    | '/payment-result'
    | '/resources'
    | '/event/$eventId'
    | '/oauth2/redirect'
    | '/event/$eventId/payment'
    | '/event/$eventId/payment/confirm'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/my-wallet'
    | '/payment-result'
    | '/resources'
    | '/event/$eventId'
    | '/oauth2/redirect'
    | '/event/$eventId/payment'
    | '/event/$eventId/payment/confirm'
  id:
    | '__root__'
    | '/'
    | '/my-wallet/'
    | '/payment-result/'
    | '/resources/'
    | '/event/$eventId/'
    | '/oauth2/redirect/'
    | '/event/$eventId/payment/'
    | '/event/$eventId/payment/confirm/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  MyWalletIndexRoute: typeof MyWalletIndexRoute
  PaymentResultIndexRoute: typeof PaymentResultIndexRoute
  ResourcesIndexRoute: typeof ResourcesIndexRoute
  EventEventIdIndexRoute: typeof EventEventIdIndexRoute
  Oauth2RedirectIndexRoute: typeof Oauth2RedirectIndexRoute
  EventEventIdPaymentIndexRoute: typeof EventEventIdPaymentIndexRoute
  EventEventIdPaymentConfirmIndexRoute: typeof EventEventIdPaymentConfirmIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/resources/': {
      id: '/resources/'
      path: '/resources'
      fullPath: '/resources'
      preLoaderRoute: typeof ResourcesIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/payment-result/': {
      id: '/payment-result/'
      path: '/payment-result'
      fullPath: '/payment-result'
      preLoaderRoute: typeof PaymentResultIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/my-wallet/': {
      id: '/my-wallet/'
      path: '/my-wallet'
      fullPath: '/my-wallet'
      preLoaderRoute: typeof MyWalletIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/oauth2/redirect/': {
      id: '/oauth2/redirect/'
      path: '/oauth2/redirect'
      fullPath: '/oauth2/redirect'
      preLoaderRoute: typeof Oauth2RedirectIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/event/$eventId/': {
      id: '/event/$eventId/'
      path: '/event/$eventId'
      fullPath: '/event/$eventId'
      preLoaderRoute: typeof EventEventIdIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/event/$eventId/payment/': {
      id: '/event/$eventId/payment/'
      path: '/event/$eventId/payment'
      fullPath: '/event/$eventId/payment'
      preLoaderRoute: typeof EventEventIdPaymentIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/event/$eventId/payment/confirm/': {
      id: '/event/$eventId/payment/confirm/'
      path: '/event/$eventId/payment/confirm'
      fullPath: '/event/$eventId/payment/confirm'
      preLoaderRoute: typeof EventEventIdPaymentConfirmIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  MyWalletIndexRoute: MyWalletIndexRoute,
  PaymentResultIndexRoute: PaymentResultIndexRoute,
  ResourcesIndexRoute: ResourcesIndexRoute,
  EventEventIdIndexRoute: EventEventIdIndexRoute,
  Oauth2RedirectIndexRoute: Oauth2RedirectIndexRoute,
  EventEventIdPaymentIndexRoute: EventEventIdPaymentIndexRoute,
  EventEventIdPaymentConfirmIndexRoute: EventEventIdPaymentConfirmIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
