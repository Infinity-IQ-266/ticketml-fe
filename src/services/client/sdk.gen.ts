// This file is auto-generated by @hey-api/openapi-ts
import type { Client, Options as Options2, TDataShape } from './client';
import { client } from './client.gen';
import type {
    AddTicketTypeToEventData,
    AddTicketTypeToEventResponses,
    CheckInTicketData,
    CheckInTicketResponses,
    CreateEventData,
    CreateEventResponses,
    CreateOrderData,
    CreateOrderResponses,
    GetAllEventsData,
    GetAllEventsResponses,
    GetCurrentUserData,
    GetCurrentUserResponses,
    GetEventByIdData,
    GetEventByIdResponses,
    GetEventsByOrganizationData,
    GetEventsByOrganizationResponses,
    GetMyOrderHistoryData,
    GetMyOrderHistoryResponses,
    GetMyOrganizationsData,
    GetMyOrganizationsResponses,
    GetTicketsData,
    GetTicketsResponses,
    HandleVnpayIpnData,
    HandleVnpayIpnResponses,
    UpdateEventData,
    UpdateEventResponses,
    UpdateTicketTypeData,
    UpdateTicketTypeResponses,
} from './types.gen';

export type Options<
    TData extends TDataShape = TDataShape,
    ThrowOnError extends boolean = boolean,
> = Options2<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export const getEventsByOrganization = <ThrowOnError extends boolean = false>(
    options: Options<GetEventsByOrganizationData, ThrowOnError>,
) => {
    return (options.client ?? client).get<
        GetEventsByOrganizationResponses,
        unknown,
        ThrowOnError
    >({
        url: '/api/v1/organizer/organizations/{orgId}/events',
        ...options,
    });
};

export const createEvent = <ThrowOnError extends boolean = false>(
    options: Options<CreateEventData, ThrowOnError>,
) => {
    return (options.client ?? client).post<
        CreateEventResponses,
        unknown,
        ThrowOnError
    >({
        url: '/api/v1/organizer/organizations/{orgId}/events',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers,
        },
    });
};

export const addTicketTypeToEvent = <ThrowOnError extends boolean = false>(
    options: Options<AddTicketTypeToEventData, ThrowOnError>,
) => {
    return (options.client ?? client).post<
        AddTicketTypeToEventResponses,
        unknown,
        ThrowOnError
    >({
        url: '/api/v1/organizer/events/{eventId}/ticketTypes',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers,
        },
    });
};

export const checkInTicket = <ThrowOnError extends boolean = false>(
    options: Options<CheckInTicketData, ThrowOnError>,
) => {
    return (options.client ?? client).post<
        CheckInTicketResponses,
        unknown,
        ThrowOnError
    >({
        url: '/api/v1/organizer/events/{eventId}/checkIn',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers,
        },
    });
};

export const createOrder = <ThrowOnError extends boolean = false>(
    options: Options<CreateOrderData, ThrowOnError>,
) => {
    return (options.client ?? client).post<
        CreateOrderResponses,
        unknown,
        ThrowOnError
    >({
        url: '/api/v1/orders',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers,
        },
    });
};

export const updateTicketType = <ThrowOnError extends boolean = false>(
    options: Options<UpdateTicketTypeData, ThrowOnError>,
) => {
    return (options.client ?? client).patch<
        UpdateTicketTypeResponses,
        unknown,
        ThrowOnError
    >({
        url: '/api/v1/organizer/ticketTypes/{ticketTypeId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers,
        },
    });
};

export const updateEvent = <ThrowOnError extends boolean = false>(
    options: Options<UpdateEventData, ThrowOnError>,
) => {
    return (options.client ?? client).patch<
        UpdateEventResponses,
        unknown,
        ThrowOnError
    >({
        url: '/api/v1/organizer/events/{eventId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers,
        },
    });
};

export const getCurrentUser = <ThrowOnError extends boolean = false>(
    options?: Options<GetCurrentUserData, ThrowOnError>,
) => {
    return (options?.client ?? client).get<
        GetCurrentUserResponses,
        unknown,
        ThrowOnError
    >({
        url: '/api/v1/users/me',
        ...options,
    });
};

export const getTickets = <ThrowOnError extends boolean = false>(
    options?: Options<GetTicketsData, ThrowOnError>,
) => {
    return (options?.client ?? client).get<
        GetTicketsResponses,
        unknown,
        ThrowOnError
    >({
        url: '/api/v1/users/me/tickets',
        ...options,
    });
};

export const getMyOrderHistory = <ThrowOnError extends boolean = false>(
    options?: Options<GetMyOrderHistoryData, ThrowOnError>,
) => {
    return (options?.client ?? client).get<
        GetMyOrderHistoryResponses,
        unknown,
        ThrowOnError
    >({
        url: '/api/v1/users/me/orders',
        ...options,
    });
};

export const handleVnpayIpn = <ThrowOnError extends boolean = false>(
    options?: Options<HandleVnpayIpnData, ThrowOnError>,
) => {
    return (options?.client ?? client).get<
        HandleVnpayIpnResponses,
        unknown,
        ThrowOnError
    >({
        url: '/api/v1/payment/vnpay-ipn',
        ...options,
    });
};

export const getMyOrganizations = <ThrowOnError extends boolean = false>(
    options?: Options<GetMyOrganizationsData, ThrowOnError>,
) => {
    return (options?.client ?? client).get<
        GetMyOrganizationsResponses,
        unknown,
        ThrowOnError
    >({
        url: '/api/v1/organizer/organizations',
        ...options,
    });
};

export const getAllEvents = <ThrowOnError extends boolean = false>(
    options?: Options<GetAllEventsData, ThrowOnError>,
) => {
    return (options?.client ?? client).get<
        GetAllEventsResponses,
        unknown,
        ThrowOnError
    >({
        url: '/api/v1/events',
        ...options,
    });
};

export const getEventById = <ThrowOnError extends boolean = false>(
    options: Options<GetEventByIdData, ThrowOnError>,
) => {
    return (options.client ?? client).get<
        GetEventByIdResponses,
        unknown,
        ThrowOnError
    >({
        url: '/api/v1/events/{eventId}',
        ...options,
    });
};
